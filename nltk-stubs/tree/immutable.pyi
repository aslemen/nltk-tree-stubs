from _typeshed import Incomplete
from nltk.probability import ProbabilisticMixIn
from nltk.tree.parented import MultiParentedTree, ParentedTree
from nltk.tree.tree import Tree

__all__ = ['ImmutableProbabilisticTree', 'ImmutableTree', 'ImmutableParentedTree', 'ImmutableMultiParentedTree']

class ImmutableTree(Tree):
    def __init__(self, node, children: Incomplete | None = None) -> None: ...
    def __setitem__(self, index, value) -> None: ...
    def __setslice__(self, i, j, value) -> None: ...
    def __delitem__(self, index) -> None: ...
    def __delslice__(self, i, j) -> None: ...
    def __iadd__(self, other) -> None: ...
    def __imul__(self, other) -> None: ...
    def append(self, v) -> None: ...
    def extend(self, v) -> None: ...
    def pop(self, v: Incomplete | None = None) -> None: ...
    def remove(self, v) -> None: ...
    def reverse(self) -> None: ...
    def sort(self) -> None: ...
    def __hash__(self): ...
    def set_label(self, value) -> None: ...

class ImmutableProbabilisticTree(ImmutableTree, ProbabilisticMixIn):
    def __init__(self, node, children: Incomplete | None = None, **prob_kwargs) -> None: ...
    def copy(self, deep: bool = False): ...
    @classmethod
    def convert(cls, val): ...

class ImmutableParentedTree(ImmutableTree, ParentedTree): ...
class ImmutableMultiParentedTree(ImmutableTree, MultiParentedTree): ...
