from _typeshed import Incomplete
from abc import ABCMeta
from nltk.tree.tree import Tree

__all__ = ['ParentedTree', 'MultiParentedTree']

class AbstractParentedTree(Tree, metaclass=ABCMeta):
    def __init__(self, node, children: Incomplete | None = None) -> None: ...
    def __delitem__(self, index) -> None: ...
    def __setitem__(self, index, value) -> None: ...
    def append(self, child) -> None: ...
    def extend(self, children) -> None: ...
    def insert(self, index, child) -> None: ...
    def pop(self, index: int = -1): ...
    def remove(self, child) -> None: ...
    def __getslice__(self, start, stop): ...
    def __delslice__(self, start, stop): ...
    def __setslice__(self, start, stop, value): ...
    def __getnewargs__(self): ...

class ParentedTree(AbstractParentedTree):
    def __init__(self, node, children: Incomplete | None = None) -> None: ...
    def copy(self, deep: bool = False): ...
    def parent(self): ...
    def parent_index(self): ...
    def left_sibling(self): ...
    def right_sibling(self): ...
    def root(self): ...
    def treeposition(self): ...

class MultiParentedTree(AbstractParentedTree):
    def __init__(self, node, children: Incomplete | None = None) -> None: ...
    def parents(self): ...
    def left_siblings(self): ...
    def right_siblings(self): ...
    def roots(self): ...
    def parent_indices(self, parent): ...
    def treepositions(self, root): ...
